plot(df_trades_sumby_buybroker$sum, col = kmeans.result$cluster,main = paste('Clusters of Buyers'),
xlab = "Index",ylab = "Sum of Stocks bought by each buyer")
kmeans$centers[, 1]
# plot cluster centers
points(kmeans$centers[, 1], col = 1:2, pch = 8, cex = 2)
# Calulating standarad deviations
mean.result <- mean(df_trades_sumby_buybroker$sum)
std.result<- sqrt(var(df_trades_sumby_buybroker$sum))
upper_limit<-3*std.result + mean.result
# Finding the outliers
outliers <- vector()
for (i in 1:nrow(kmeans$centers)){
if (kmeans$centers[i] > upper_limit){
outliers <- c(outliers,i)
}
}
kmeans$cluster
library("dplyr")
library(plyr)
#Read te dataset
df_trades = read.csv("Trades.csv", header = TRUE)
# Filter the selected trades
selected_stock<- 'ES0158252033'
filtered_trades<-subset(df_trades, df_trades$Stock == selected_stock)
# summarize data by buy broker and compute sum, mean, and std of traded quantities
df_trades_sumby_buybroker <- ddply(selected_trades, c("Buy.Broker.ID"),
summarise, sum = sum(Executed.Qty), mean = mean(Executed.Qty), sd = sd(Executed.Qty))
# Using the Elbow method by considering Within Cluster Sum Squares to find the optimum no of Clusters
set.seed(10)
wcss <- vector()
for (i in 1:10) wcss[i]<-sum(kmeans(df_trades_sumby_buybroker$sum,i)$withinss)
plot(1:10,wcss, type= "b", main = paste('The Elbow Method for Buyer Outliers'), xlab = "Number of Clusters", ylab = "WCSS")
#The Optimum number of clusters is 4
# Applying K means
kmeans <- kmeans(df_trades_sumby_buybroker$sum, 4)
# Plot the Kmeans Results
plot(df_trades_sumby_buybroker$sum, col = kmeans.result$cluster,main = paste('Clusters of Buyers'),
xlab = "Index",ylab = "Sum of Stocks bought by each buyer")
kmeans$centers[, 1]
# plot cluster centers
points(kmeans$centers[, 1], col = 1:2, pch = 8, cex = 2)
# Calulating standarad deviations
mean.result <- mean(df_trades_sumby_buybroker$sum)
std.result<- sqrt(var(df_trades_sumby_buybroker$sum))
upper_limit<-3*std.result + mean.result
# Finding the outliers
outliers <- vector()
for (i in 1:nrow(kmeans$centers)){
if (kmeans$centers[i] > upper_limit){
outliers <- c(outliers,i)
}
}
kmeans$centers
library("dplyr")
library(plyr)
#Read te dataset
df_trades = read.csv("Trades.csv", header = TRUE)
# Filter the selected trades
selected_stock<- 'ES0158252033'
filtered_trades<-subset(df_trades, df_trades$Stock == selected_stock)
# summarize data by buy broker and compute sum, mean, and std of traded quantities
df_trades_sumby_buybroker <- ddply(selected_trades, c("Buy.Broker.ID"),
summarise, sum = sum(Executed.Qty), mean = mean(Executed.Qty), sd = sd(Executed.Qty))
# Using the Elbow method by considering Within Cluster Sum Squares to find the optimum no of Clusters
set.seed(10)
wcss <- vector()
for (i in 1:10) wcss[i]<-sum(kmeans(df_trades_sumby_buybroker$sum,i)$withinss)
plot(1:10,wcss, type= "b", main = paste('The Elbow Method for Buyer Outliers'), xlab = "Number of Clusters", ylab = "WCSS")
#The Optimum number of clusters is 4
set.seed(8943)
# Applying K means
kmeans <- kmeans(df_trades_sumby_buybroker$sum, 4)
# Plot the Kmeans Results
plot(df_trades_sumby_buybroker$sum, col = kmeans.result$cluster,main = paste('Clusters of Buyers'),
xlab = "Index",ylab = "Sum of Stocks bought by each buyer")
kmeans$centers[, 1]
# plot cluster centers
points(kmeans$centers[, 1], col = 1:2, pch = 8, cex = 2)
# Calulating standarad deviations
mean.result <- mean(df_trades_sumby_buybroker$sum)
std.result<- sqrt(var(df_trades_sumby_buybroker$sum))
upper_limit<-3*std.result + mean.result
# Finding the outliers
outliers <- vector()
for (i in 1:nrow(kmeans$centers)){
if (kmeans$centers[i] > upper_limit){
outliers <- c(outliers,i)
}
}
kmeans$centers
View(filtered_trades)
View(filtered_trades)
required_dimension = filtered_trades[c(5,2)]
View(required_dimension)
View(required_dimension)
# Using the Elbow method by considering Within Cluster Sum Squares to find the optimum no of Clusters
set.seed(10)
wcss <- vector()
for (i in 1:10) wcss[i]<-sum(kmeans(required_dimension,i)$withinss)
plot(1:10,wcss, type= "b", main = paste('The Elbow Method for Buyer Outliers'), xlab = "Number of Clusters", ylab = "WCSS")
kmeans <- kmeans(required_dimension,3)
kmeans <- kmeans(required_dimension,3)
plot(required_dimension$Buy.Order.ID,required_dimension$Executed.Qty col = kmeans.result$cluster,main = paste('Clusters of Buyers'),
xlab = "Index",ylab = "Sum of Stocks bought by each buyer")
kmeans <- kmeans(required_dimension,3)
plot(required_dimension$Buy.Order.ID,required_dimension$Executed.Qty ,col = kmeans.result$cluster,main = paste('Clusters of Buyers'),
xlab = "Index",ylab = "Sum of Stocks bought by each buyer")
library("dplyr")
library(plyr)
#Read te dataset
df_trades = read.csv("Trades.csv", header = TRUE)
# Filter the selected trades
selected_stock<- 'ES0158252033'
filtered_trades<-subset(df_trades, df_trades$Stock == selected_stock)
required_dimension <-filtered_trades[c(5,2)]
# Using the Elbow method by considering Within Cluster Sum Squares to find the optimum no of Clusters
set.seed(10)
wcss <- vector()
for (i in 1:10) wcss[i]<-sum(kmeans(required_dimension,i)$withinss)
plot(1:10,wcss, type= "b", main = paste('The Elbow Method for Buyer Outliers'), xlab = "Number of Clusters", ylab = "WCSS")
# Optimal number of clusters  is 3
kmeans <- kmeans(required_dimension,3)
plot(required_dimension$Buy.Order.ID,required_dimension$Executed.Qty ,col = kmeans.result$cluster,main = paste('Clusters of Buyers'),
xlab = "Index",ylab = "Sum of Stocks bought by each buyer")
as.numeric(as.factor(df_trades$Buy.Broker.ID))
library("dplyr")
library(plyr)
#Read te dataset
df_trades = read.csv("Trades.csv", header = TRUE)
# Filter the selected trades
selected_stock<- 'ES0158252033'
filtered_trades<-subset(df_trades, df_trades$Stock == selected_stock)
as.numeric(as.factor(df_trades$Buy.Broker.ID))
required_dimension <-filtered_trades[c(5,2)]
View(df_trades)
View(df_trades)
View(required_dimension)
View(required_dimension)
View(required_dimension)
View(required_dimension)
buyers_int <-as.numeric(as.factor(df_trades$Buy.Broker.ID))
required_dimension <- cbind(buyers_int)
View(required_dimension)
View(required_dimension)
required_dimension <- cbind(buyers_int,df_trades$Executed.Qty)
View(required_dimension)
required_dimension <- cbind(buyers_int,Quantity)
Quantity <- df_trades$Executed.Qty
required_dimension <- cbind(buyers_int,Quantity)
View(required_dimension)
View(required_dimension)
# Using the Elbow method by considering Within Cluster Sum Squares to find the optimum no of Clusters
set.seed(10)
wcss <- vector()
for (i in 1:10) wcss[i]<-sum(kmeans(required_dimension,i)$withinss)
plot(1:10,wcss, type= "b", main = paste('The Elbow Method for Buyer Outliers'), xlab = "Number of Clusters", ylab = "WCSS")
# Optimal number of clusters  is 3
kmeans <- kmeans(required_dimension,3)
plot(required_dimension$Buy.Order.ID,required_dimension$Executed.Qty ,col = kmeans.result$cluster,main = paste('Clusters of Buyers'),
xlab = "Index",ylab = "Sum of Stocks bought by each buyer")
kmeans <- kmeans(required_dimension,3)
plot(required_dimension$buyers_int,required_dimension$Executed.Qty ,col = kmeans.result$cluster,main = paste('Clusters of Buyers'),
xlab = "Index",ylab = "Sum of Stocks bought by each buyer")
View(required_dimension)
View(required_dimension)
kmeans <- kmeans(required_dimension,3)
plot(required_dimension$buyers_int,required_dimension$Quantity ,col = kmeans.result$cluster,main = paste('Clusters of Buyers'),
xlab = "Index",ylab = "Sum of Stocks bought by each buyer")
View(required_dimension)
View(required_dimension)
# Using the Elbow method by considering Within Cluster Sum Squares to find the optimum no of Clusters
set.seed(10)
wcss <- vector()
for (i in 1:10) wcss[i]<-sum(kmeans(required_dimension,i)$withinss)
plot(1:10,wcss, type= "b", main = paste('The Elbow Method for Buyer Outliers'), xlab = "Number of Clusters", ylab = "WCSS")
# Optimal number of clusters  is 3
kmeans <- kmeans(required_dimension,3)
plot(required_dimension[1,],required_dimension[2,],col = kmeans.result$cluster,main = paste('Clusters of Buyers'),
xlab = "Index",ylab = "Sum of Stocks bought by each buyer")
library("dplyr")
library(plyr)
#Read te dataset
df_trades = read.csv("Trades.csv", header = TRUE)
# Filter the selected trades
selected_stock<- 'ES0158252033'
filtered_trades<-subset(df_trades, df_trades$Stock == selected_stock)
buyers_int <-as.numeric(as.factor(df_trades$Buy.Broker.ID))
Quantity <- df_trades$Executed.Qty
required_dimension <- cbind(buyers_int,Quantity)
# Using the Elbow method by considering Within Cluster Sum Squares to find the optimum no of Clusters
set.seed(10)
wcss <- vector()
for (i in 1:10) wcss[i]<-sum(kmeans(required_dimension,i)$withinss)
plot(1:10,wcss, type= "b", main = paste('The Elbow Method for Buyer Outliers'), xlab = "Number of Clusters", ylab = "WCSS")
# Optimal number of clusters  is 3
kmeans <- kmeans(required_dimension,3)
kmean$clusters
kmeans$cluster
library("dplyr")
library(plyr)
library(cluster)
clusplot(required_dimension,kmeans$cluster)
# Using the Elbow method by considering Within Cluster Sum Squares to find the optimum no of Clusters
set.seed(10)
wcss <- vector()
for (i in 1:10) wcss[i]<-sum(kmeans(required_dimension,i)$withinss)
plot(1:10,wcss, type= "b", main = paste('The Elbow Method for Buyer Outliers'), xlab = "Number of Clusters", ylab = "WCSS")
library("dplyr")
library(plyr)
library(cluster)
#Read te dataset
df_trades = read.csv("Trades.csv", header = TRUE)
# Filter the selected trades
selected_stock<- 'ES0158252033'
filtered_trades<-subset(df_trades, df_trades$Stock == selected_stock)
buyers_int <-as.numeric(as.factor(df_trades$Buy.Broker.ID))
Quantity <- df_trades$Executed.Qty
required_dimension <- cbind(buyers_int,Quantity)
# Using the Elbow method by considering Within Cluster Sum Squares to find the optimum no of Clusters
set.seed(10)
wcss <- vector()
for (i in 1:10) wcss[i]<-sum(kmeans(required_dimension,i)$withinss)
plot(1:10,wcss, type= "b", main = paste('The Elbow Method for Buyer Outliers'), xlab = "Number of Clusters", ylab = "WCSS")
# Optimal number of clusters  is 3
kmeans <- kmeans(required_dimension,6)
clusplot(required_dimension,kmeans$cluster)
setwd('D:/Studies/7th Semester/EE7206 - Machine Learning/Assignments/Project/Final')
library("dplyr")
library(plyr)
#Read te dataset
df_trades = read.csv("Trades.csv", header = TRUE)
# Filter the selected trades
selected_stock<- 'ES0158252033'
filtered_trades<-subset(df_trades, df_trades$Stock == selected_stock)
# summarize data by buy broker and compute sum, mean, and std of traded quantities
df_trades_sumby_buybroker <- ddply(selected_trades, c("Buy.Broker.ID"),
summarise, sum = sum(Executed.Qty), mean = mean(Executed.Qty), sd = sd(Executed.Qty))
# Using the Elbow method by considering Within Cluster Sum Squares to find the optimum no of Clusters
set.seed(10)
wcss <- vector()
for (i in 1:10) wcss[i]<-sum(kmeans(df_trades_sumby_buybroker$sum,i)$withinss)
plot(1:10,wcss, type= "b", main = paste('The Elbow Method for Buyer Outliers'), xlab = "Number of Clusters", ylab = "WCSS")
#The Optimum number of clusters is 4
# Applying K means
kmeans <- kmeans(df_trades_sumby_buybroker$sum, 4)
# Plot the Kmeans Results
plot(df_trades_sumby_buybroker$sum, col = kmeans.result$cluster,main = paste('Clusters of Buyers'),
xlab = "Index",ylab = "Sum of Stocks bought by each buyer")
kmeans$centers[, 1]
# plot cluster centers
points(kmeans$centers[, 1], col = 1:2, pch = 8, cex = 2)
# Calulating standarad deviations
mean.result <- mean(df_trades_sumby_buybroker$sum)
std.result<- sqrt(var(df_trades_sumby_buybroker$sum))
upper_limit<-3*std.result + mean.result
# Finding the outliers
outliers <- vector()
for (i in 1:nrow(kmeans$centers)){
if (kmeans$centers[i] > upper_limit){
outliers <- c(outliers,i)
}
}
kmeans$cluster
library("dplyr")
library(plyr)
#Read the dataset
df_trades = read.csv("Trades.csv", header = TRUE)
# Filter the selected trades
selected_stock<- 'ES0158252033'
filtered_trades<-subset(df_trades, df_trades$Stock == selected_stock)
# summarize data by buy broker and compute sum, mean, and std of traded quantities
df_trades_sumby_buybroker <- ddply(selected_trades, c("Buy.Broker.ID"),
summarise, sum = sum(Executed.Qty), mean = mean(Executed.Qty), sd = sd(Executed.Qty))
library("dplyr")
library(plyr)
#Read the dataset
df_trades = read.csv("Trades.csv", header = TRUE)
# Filter the selected trades
selected_stock<- 'ES0158252033'
selected_trades<-subset(df_trades, df_trades$Stock == selected_stock)
# summarize data by buy broker and compute sum, mean, and std of traded quantities
df_trades_sumby_buybroker <- ddply(selected_trades, c("Buy.Broker.ID"),
summarise, sum = sum(Executed.Qty), mean = mean(Executed.Qty), sd = sd(Executed.Qty))
# Using the Elbow method by considering Within Cluster Sum Squares to find the optimum no of Clusters
set.seed(10)
wcss <- vector()
for (i in 1:10) wcss[i]<-sum(kmeans(df_trades_sumby_buybroker$sum,i)$withinss)
plot(1:10,wcss, type= "b", main = paste('The Elbow Method for Buyer Outliers'), xlab = "Number of Clusters", ylab = "WCSS")
#The Optimum number of clusters is 4
# Applying K means
kmeans <- kmeans(df_trades_sumby_buybroker$sum, 4)
# Plot the Kmeans Results
plot(df_trades_sumby_buybroker$sum, col = kmeans.result$cluster,main = paste('Clusters of Buyers'),
xlab = "Index",ylab = "Sum of Stocks bought by each buyer")
kmeans$centers[, 1]
# plot cluster centers
points(kmeans$centers[, 1], col = 1:2, pch = 8, cex = 2)
# Calulating standarad deviations
mean.result <- mean(df_trades_sumby_buybroker$sum)
std.result<- sqrt(var(df_trades_sumby_buybroker$sum))
upper_limit<-3*std.result + mean.result
# Finding the outliers
outliers <- vector()
for (i in 1:nrow(kmeans$centers)){
if (kmeans$centers[i] > upper_limit){
outliers <- c(outliers,i)
}
}
kmeans$cluster
kmeans$cluster
outliers
plot(df_trades_sumby_buybroker$sum, col = kmeans.result$cluster,main = paste('Clusters of Buyers'),
xlab = "Index",ylab = "Sum of Stocks bought by each buyer")
plot(df_trades_sumby_buybroker$sum, col = kmeans$cluster,main = paste('Clusters of Buyers'),
xlab = "Index",ylab = "Sum of Stocks bought by each buyer")
# plot cluster centers
points(kmeans$centers[, 1], col = 1:2, pch = 8, cex = 2)
# Finding  the outliers  using  KMeans Clustering
# Reading the dataset
df_trades = read.csv("Trades.csv", header = TRUE)
# Filtering the dataset according  using the selected dataset
selected_stock<- 'ES0158252033'
selected_trades<-subset(df_trades, df_trades$Stock == selected_stock)
selected_trades$ID<- seq.int(nrow(selected_trades))
# Using the Elbow method by considering Within Cluster Sum Squares to find the optimum no of Clusters
set.seed(10)
wcss <- vector()
for (i in 1:10) wcss[i]<-sum(kmeans(selected_trades$Executed.Qty,i)$withinss)
plot(1:10,wcss, type= "b", main = paste('The Elbow Method'), xlab = "Number of Clusters", ylab = "WCSS")
#Using the elbow method we get 6 as optimal clusters
kmeans <- kmeans(selected_trades$Executed.Qty,3)
# Plot the clusters
plot(selected_trades$Executed.Qty, col=kmeans$cluster , main = paste('Stock Quantity Clusters'),
xlab = "Index" , ylab = 'Executed Stock Quantity' )
# Plot Cluster Centers
points(kmeans$centers[, 1], col = 1:2, pch = 8, cex = 2)
# Cluster centers
kmeans$centers[, 1]
# Calculating the  mean
mean.result = mean(selected_trades$Executed.Qty)
#Calculating the Standard deviation
sd.result = sqrt(var(selected_trades$Executed.Qty))
#Upper bound for the outliers
upper = mean.result + 3 *sd.result
library(plyr)
#Separating outliers
outliers_set <- data.frame()
outliers_values <- vector()
for (i in 1:2000) {
if(df_trades$Executed.Qty[i] >upper) {
outliers_values<- c(outliers,df_trades$Executed.Qty[i] )
filtered_trades =subset(df_trades, df_trades$Executed.Qty == df_trades$Executed.Qty[i])
outliers_set <- rbind(outliers_set,filtered_trades)
}
}
outliers
# Calculating the  mean
mean.result = mean(selected_trades$Executed.Qty)
#Calculating the Standard deviation
sd.result = sqrt(var(selected_trades$Executed.Qty))
#Upper bound for the outliers
upper = mean.result + 3 *sd.result
#Separating outliers
outliers_set <- data.frame()
outliers_values <- vector()
for (i in 1:2000) {
if(df_trades$Executed.Qty[i] >upper) {
outliers_values<- c(outliers,df_trades$Executed.Qty[i] )
filtered_trades =subset(df_trades, df_trades$Executed.Qty == df_trades$Executed.Qty[i])
outliers_set <- rbind(outliers_set,filtered_trades)
}
}
View(outliers_set)
View(selected_trades)
View(selected_trades)
View(outliers_set)
View(outliers_set)
# Finding  the outliers  using  KMeans Clustering
# Reading the dataset
df_trades = read.csv("Trades.csv", header = TRUE)
# Filtering the dataset according  using the selected dataset
selected_stock<- 'ES0158252033'
selected_trades<-subset(df_trades, df_trades$Stock == selected_stock)
selected_trades$ID<- seq.int(nrow(selected_trades))
# Using the Elbow method by considering Within Cluster Sum Squares to find the optimum no of Clusters
set.seed(10)
wcss <- vector()
for (i in 1:10) wcss[i]<-sum(kmeans(selected_trades$Executed.Qty,i)$withinss)
plot(1:10,wcss, type= "b", main = paste('The Elbow Method'), xlab = "Number of Clusters", ylab = "WCSS")
#Using the elbow method we get 6 as optimal clusters
kmeans <- kmeans(selected_trades$Executed.Qty,3)
# Plot the clusters
plot(selected_trades$Executed.Qty, col=kmeans$cluster , main = paste('Stock Quantity Clusters'),
xlab = "Index" , ylab = 'Executed Stock Quantity' )
# Plot Cluster Centers
points(kmeans$centers[, 1], col = 1:2, pch = 8, cex = 2)
# Cluster centers
kmeans$centers[, 1]
# Calculating the  mean
mean.result = mean(selected_trades$Executed.Qty)
#Calculating the Standard deviation
sd.result = sqrt(var(selected_trades$Executed.Qty))
#Upper bound for the outliers
upper = mean.result + 3 *sd.result
library(plyr)
#Separating outliers
outliers_set <- data.frame()
outliers_values <- vector()
for (i in 1:2000) {
if(df_trades$Executed.Qty[i] >upper) {
outliers_values<- c(outliers,df_trades$Executed.Qty[i] )
filtered_trades =subset(df_trades, df_trades$Executed.Qty == df_trades$Executed.Qty[i])
outliers_set <- rbind(outliers_set,filtered_trades)
}
}
#Separating outliers
outliers_set <- data.frame()
outliers_values <- vector()
for (i in 1:2000) {
if(selected_trades$Executed.Qty[i] >upper) {
outliers_values<- c(outliers,df_trades$Executed.Qty[i] )
filtered_trades =subset(df_trades, selected_trades$Executed.Qty == selected$Executed.Qty[i])
outliers_set <- rbind(outliers_set,filtered_trades)
}
}
outlier_cluster_centers -> vector()
outlier_cluster_centers <- vector()
#Separating outliers
outliers<- vector()
for (i in 1:nrow(kmeans$centers)){
if (kmeans$centers[i] > upper){
outliers <- c(outliers,i)
}
}
outliers
# imporing libraries
library(tidyverse)      # data manipulation and visualization
library(lubridate)      # easily work with dates and times
library(fpp2)           # working with time series data
library(zoo)            # working with time series data
library(dplyr)
library(arules)         # Apriori Algorithm library
# Reading the dataset
df_trades = read.csv("Trades.csv", header = TRUE)
# Filtering the dataset for the required stock
selected_stock<- 'ES0158252033'
selected_trades<-subset(df_trades, df_trades$Stock == selected_stock)
selected_trades2 <- selected_trades
#####################################################################################################################################
# Using Trailing Moving Averages  to detect  Price Changges
#####################################################################################################################################s
# Calculating trailing moving average with 50 data points
selected_trades <-selected_trades %>%
select(Trade.Date,Executed.Price)%>%
mutate(trailingAverage = rollmean(Executed.Price, k=50, fill =NA,align ="right"))
# Removing rows for which there is no moving average.
selected_trades <- selected_trades[50:1980,]
# Adding an index to the data rows
selected_trades$ID<- seq.int(nrow(selected_trades))
# Plot the index vs Stock Price graph
plot(selected_trades$ID, selected_trades$Executed.Price, type = 'l', xlab = "Index",
ylab = "Stock Price",col="blue", main = "Variation of Prices for Stock ES0158252033 " ,lwd=1.5)
# Plot the Trailing moving average curve
lines(selected_trades$ID,selected_trades$trailingAverage, col="red" ,lwd=2)
# Calculating the percentage change stock price with respect Moving Trailing Average
perecentage_change <- vector()
for ( i in 1:nrow(selected_trades)){
value <- abs(selected_trades$Executed.Price[i] - selected_trades$trailingAverage[i])/selected_trades$trailingAverage[i]
perecentage_change <- c(perecentage_change,value*100)
}
selected_trades <- cbind(perecentage_change,selected_trades)
#Selecting the  points where prices have drop and rose
min_max_points <- vector()
max_index <-vector()
for(i in 1:1931){
if(selected_trades$perecentage_change[i]>2){
min_max_points <- c(min_max_points, selected_trades$Executed.Price[i])
max_index <-c(max_index,i)
}
}
# Ploting the price changes points
points(max_index,min_max_points,col="yellow" ,pch =1)
#Legend
legend(x="topright",y=0.92, legend=c("Executed Price","Trailing Moving Average","Price Changes"),
col=c("blue", "red","yellow"),lty=c(1,1,NA),pch =c(NA, NA, 1) ,cex=0.8 ,lwd = 2)
#Finding the relevants  buyers and related to above points
selected_trades2 <-selected_trades2[50:1980,]
selected_trades2$ID <- seq.int(nrow(selected_trades2))
suspected_transactions <- selected_trades2[match(max_index,selected_trades2$ID),]
#####################################################################################################################################
# Applying Apriori Algorithm Detect Collusive Traders
#####################################################################################################################################
#Getting the unique dataset
suspected_transactions2 <- suspected_transactions[c(7,8)]
suspected_transactions2$const = TRUE
suspected_transactions2 <- unique(suspected_transactions2)
#Forming a  sparse matrix for relevant transactions to fits in Apriori
orders_mat_prep <- reshape(data = suspected_transactions2,
idvar = "Sell.Broker.ID",
timevar = "Buy.Broker.ID",
direction = "wide")
order_matrix <- as.matrix(orders_mat_prep[,-1])
order_matrix[is.na(order_matrix)] <- FALSE
colnames(order_matrix) <- gsub(x=colnames(order_matrix),
pattern="const\\.", replacement="")
order_trans2 <- as(order_matrix,"transactions")
# Summary and Frequency
summary(order_trans2)
itemFrequencyPlot(order_trans2)
#Applying  Apriori
rules = apriori(data = order_trans2 , parameter = list(support = 0.5, confidence = 0.8 ,maxlen =5 ,minlen =2))
inspect(sort(rules,by ='lift')[1:10])
